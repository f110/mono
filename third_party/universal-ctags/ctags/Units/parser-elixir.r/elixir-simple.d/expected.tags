MyList	input.ex	/^defmodule MyList do$/;"	module
reverse	input.ex	/^  defdelegate reverse(list), to: Enum$/;"	delegate	module:MyList
other_reverse	input.ex	/^  defdelegate other_reverse(list), to: Enum, as: :reverse$/;"	delegate	module:MyList
Size	input.ex	/^defprotocol Size do$/;"	protocol
size	input.ex	/^  def size(data)$/;"	function	protocol:Size	access:public
MyGuards	input.ex	/^defmodule Integer.MyGuards do$/;"	module
is_even	input.ex	/^  defguard is_even(value) when is_integer(value) and rem(value, 2) == 0$/;"	guard	module:MyGuards	access:public
is_odd	input.ex	/^  defguardp is_odd(value) when is_integer(value) and rem(value, 2) != 0$/;"	guard	module:MyGuards	access:private
Size	input.ex	/^defimpl Size, for: BitString do$/;"	implementation	module:MyGuards
size	input.ex	/^  def size(binary), do: byte_size(binary)$/;"	function	module:MyGuards	access:public
