OperatorModule	input.ex	/^defmodule OperatorModule do$/;"	module
+	input.ex	/^  def a + b, do: max(a, b)$/;"	operator	module:OperatorModule
-	input.ex	/^  def a - b, do: max(a, b)$/;"	operator	module:OperatorModule
*	input.ex	/^  def a * b, do: max(a, b)$/;"	operator	module:OperatorModule
/	input.ex	/^  def a \/ b, do: max(a, b)$/;"	operator	module:OperatorModule
=	input.ex	/^  def a = b, do: max(a, b)$/;"	operator	module:OperatorModule
.	input.ex	/^  def a . b, do: max(a, b)$/;"	operator	module:OperatorModule
|	input.ex	/^  def a | b, do: max(a, b)$/;"	operator	module:OperatorModule
|||	input.ex	/^  def _ ||| b, do: max(a, b)$/;"	operator	module:OperatorModule
&&&	input.ex	/^  def a &&& _, do: max(a, b)$/;"	operator	module:OperatorModule
<<<	input.ex	/^  def a <<< b, do: max(a, b)$/;"	operator	module:OperatorModule
>>>	input.ex	/^  defp a >>> b, do: max(a, b)$/;"	operator	module:OperatorModule
<<~	input.ex	/^  defp _ <<~ _, do: max(a, b)$/;"	operator	module:OperatorModule
~>>	input.ex	/^  defp a ~>> b, do: max(a, b)$/;"	operator	module:OperatorModule
<~	input.ex	/^  defmacro a <~ b, do: max(a, b)$/;"	operator	module:OperatorModule
~>	input.ex	/^  defmacro _ ~> b, do: max(a, b)$/;"	operator	module:OperatorModule
<~>	input.ex	/^  defmacro a <~> _, do: max(a, b)$/;"	operator	module:OperatorModule
<|>	input.ex	/^  defmacrop a <|> b, do: max(a, b)$/;"	operator	module:OperatorModule
^^^	input.ex	/^  defmacrop _ ^^^ _, do: max(a, b)$/;"	operator	module:OperatorModule
~~~	input.ex	/^  defmacrop a ~~~ b, do: max(a, b)$/;"	operator	module:OperatorModule
