mul	input.ts	/^function mul(a: number, b: number) {$/;"	f
a	input.ts	/^function mul(a: number, b: number) {$/;"	z	function:mul
b	input.ts	/^function mul(a: number, b: number) {$/;"	z	function:mul
numberToString	input.ts	/^function numberToString(a: number[]) {$/;"	f
a	input.ts	/^function numberToString(a: number[]) {$/;"	z	function:numberToString
stringArray	input.ts	/^  var stringArray = a.map(v => v.toString());$/;"	l	function:numberToString
map	input.ts	/^function map<T, U>(a: T[], f: (x: T) => U): U[] {$/;"	f
a	input.ts	/^function map<T, U>(a: T[], f: (x: T) => U): U[] {$/;"	z	function:map
f	input.ts	/^function map<T, U>(a: T[], f: (x: T) => U): U[] {$/;"	z	function:map
result	input.ts	/^  var result: U[] = [];$/;"	l	function:map
i	input.ts	/^  for (var i = 0; i < a.length; i++) result.push(f(a[i]));$/;"	l	function:map
zip	input.ts	/^function zip<S, T, U>(x: S[], y: T[], combine: (x: S) => (y: T) => U): U[] {$/;"	f
x	input.ts	/^function zip<S, T, U>(x: S[], y: T[], combine: (x: S) => (y: T) => U): U[] {$/;"	z	function:zip
y	input.ts	/^function zip<S, T, U>(x: S[], y: T[], combine: (x: S) => (y: T) => U): U[] {$/;"	z	function:zip
combine	input.ts	/^function zip<S, T, U>(x: S[], y: T[], combine: (x: S) => (y: T) => U): U[] {$/;"	z	function:zip
len	input.ts	/^  var len = Math.max(x.length, y.length);$/;"	l	function:zip
result	input.ts	/^  var result: U[] = [];$/;"	l	function:zip
i	input.ts	/^  for (var i = 0; i < len; i++) result.push(combine(x[i])(y[i]));$/;"	l	function:zip
f1	input.ts	/^function f1(x: string | number | boolean) {$/;"	f
x	input.ts	/^function f1(x: string | number | boolean) {$/;"	z	function:f1
y	input.ts	/^    var y = x; \/\/ Type of y is string | number$/;"	l	function:f1
z	input.ts	/^    var z = x; \/\/ Type of z is boolean$/;"	l	function:f1
f2	input.ts	/^function f2(input: boolean) {$/;"	f
input	input.ts	/^function f2(input: boolean) {$/;"	z	function:f2
a	input.ts	/^    let a = 100;$/;"	l	function:f2
b	input.ts	/^        let b = a + 1;$/;"	l	function:f2
f3	input.ts	/^function f3(input: boolean) {$/;"	f
input	input.ts	/^function f3(input: boolean) {$/;"	z	function:f3
a	input.ts	/^    const a = 100;$/;"	C	function:f3
b	input.ts	/^        let b = a + 1;$/;"	l	function:f3
f4	input.ts	/^function f4(input = [1, 2]) {$/;"	f
input	input.ts	/^function f4(input = [1, 2]) {$/;"	z	function:f4
first	input.ts	/^  let [first, second] = input;$/;"	l	function:f4
second	input.ts	/^  let [first, second] = input;$/;"	l	function:f4
f5	input.ts	/^function f5([first, second]: [number, number]) {$/;"	f
first	input.ts	/^function f5([first, second]: [number, number]) {$/;"	z	function:f5
second	input.ts	/^function f5([first, second]: [number, number]) {$/;"	z	function:f5
d	input.ts	/^function d(p: string): void {$/;"	f
p	input.ts	/^function d(p: string): void {$/;"	z	function:d
view	input.ts	/^    const view = p as BigTableView;$/;"	C	function:d
