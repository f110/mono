load("@rules_go//go:def.bzl", "go_library")

go_library(
    name = "profiler",
    srcs = [
        "heap.go",
        "mutex.go",
        "profiler.go",
    ],
    importmap = "golang.org/x/pkgsite/vendor/cloud.google.com/go/profiler",
    importpath = "cloud.google.com/go/profiler",
    visibility = ["//visibility:public"],
    deps = [
        "//third_party/pkgsite/vendor/cloud.google.com/go/compute/metadata",
        "//third_party/pkgsite/vendor/cloud.google.com/go/internal/version",
        "//third_party/pkgsite/vendor/github.com/golang/protobuf/proto",
        "//third_party/pkgsite/vendor/github.com/golang/protobuf/ptypes",
        "//third_party/pkgsite/vendor/github.com/google/pprof/profile",
        "//third_party/pkgsite/vendor/github.com/googleapis/gax-go/v2:gax-go",
        "//third_party/pkgsite/vendor/google.golang.org/api/option",
        "//third_party/pkgsite/vendor/google.golang.org/api/transport/grpc",
        "//third_party/pkgsite/vendor/google.golang.org/genproto/googleapis/devtools/cloudprofiler/v2:cloudprofiler",
        "//third_party/pkgsite/vendor/google.golang.org/genproto/googleapis/rpc/errdetails",
        "//third_party/pkgsite/vendor/google.golang.org/grpc",
        "//third_party/pkgsite/vendor/google.golang.org/grpc/codes",
        "//third_party/pkgsite/vendor/google.golang.org/grpc/metadata",
        "//third_party/pkgsite/vendor/google.golang.org/grpc/status",
    ],
)
