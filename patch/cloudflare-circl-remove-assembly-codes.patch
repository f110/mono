diff --git a/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.go b/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.go
deleted file mode 100644
index 8a3d54c5..00000000
--- a/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.go
+++ /dev/null
@@ -1,30 +0,0 @@
-//go:build amd64 && !purego
-// +build amd64,!purego
-
-package x25519
-
-import (
-	fp "github.com/cloudflare/circl/math/fp25519"
-	"golang.org/x/sys/cpu"
-)
-
-var hasBmi2Adx = cpu.X86.HasBMI2 && cpu.X86.HasADX
-
-var _ = hasBmi2Adx
-
-func double(x, z *fp.Elt)             { doubleAmd64(x, z) }
-func diffAdd(w *[5]fp.Elt, b uint)    { diffAddAmd64(w, b) }
-func ladderStep(w *[5]fp.Elt, b uint) { ladderStepAmd64(w, b) }
-func mulA24(z, x *fp.Elt)             { mulA24Amd64(z, x) }
-
-//go:noescape
-func ladderStepAmd64(w *[5]fp.Elt, b uint)
-
-//go:noescape
-func diffAddAmd64(w *[5]fp.Elt, b uint)
-
-//go:noescape
-func doubleAmd64(x, z *fp.Elt)
-
-//go:noescape
-func mulA24Amd64(z, x *fp.Elt)
diff --git a/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.h b/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.h
deleted file mode 100644
index 8c1ae4d0..00000000
--- a/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.h
+++ /dev/null
@@ -1,111 +0,0 @@
-#define ladderStepLeg          \
-    addSub(x2,z2)              \
-    addSub(x3,z3)              \
-    integerMulLeg(b0,x2,z3)    \
-    integerMulLeg(b1,x3,z2)    \
-    reduceFromDoubleLeg(t0,b0) \
-    reduceFromDoubleLeg(t1,b1) \
-    addSub(t0,t1)              \
-    cselect(x2,x3,regMove)     \
-    cselect(z2,z3,regMove)     \
-    integerSqrLeg(b0,t0)       \
-    integerSqrLeg(b1,t1)       \
-    reduceFromDoubleLeg(x3,b0) \
-    reduceFromDoubleLeg(z3,b1) \
-    integerMulLeg(b0,x1,z3)    \
-    reduceFromDoubleLeg(z3,b0) \
-    integerSqrLeg(b0,x2)       \
-    integerSqrLeg(b1,z2)       \
-    reduceFromDoubleLeg(x2,b0) \
-    reduceFromDoubleLeg(z2,b1) \
-    subtraction(t0,x2,z2)      \
-    multiplyA24Leg(t1,t0)      \
-    additionLeg(t1,t1,z2)      \
-    integerMulLeg(b0,x2,z2)    \
-    integerMulLeg(b1,t0,t1)    \
-    reduceFromDoubleLeg(x2,b0) \
-    reduceFromDoubleLeg(z2,b1)
-
-#define ladderStepBmi2Adx      \
-    addSub(x2,z2)              \
-    addSub(x3,z3)              \
-    integerMulAdx(b0,x2,z3)    \
-    integerMulAdx(b1,x3,z2)    \
-    reduceFromDoubleAdx(t0,b0) \
-    reduceFromDoubleAdx(t1,b1) \
-    addSub(t0,t1)              \
-    cselect(x2,x3,regMove)     \
-    cselect(z2,z3,regMove)     \
-    integerSqrAdx(b0,t0)       \
-    integerSqrAdx(b1,t1)       \
-    reduceFromDoubleAdx(x3,b0) \
-    reduceFromDoubleAdx(z3,b1) \
-    integerMulAdx(b0,x1,z3)    \
-    reduceFromDoubleAdx(z3,b0) \
-    integerSqrAdx(b0,x2)       \
-    integerSqrAdx(b1,z2)       \
-    reduceFromDoubleAdx(x2,b0) \
-    reduceFromDoubleAdx(z2,b1) \
-    subtraction(t0,x2,z2)      \
-    multiplyA24Adx(t1,t0)      \
-    additionAdx(t1,t1,z2)      \
-    integerMulAdx(b0,x2,z2)    \
-    integerMulAdx(b1,t0,t1)    \
-    reduceFromDoubleAdx(x2,b0) \
-    reduceFromDoubleAdx(z2,b1)
-
-#define difAddLeg              \
-    addSub(x1,z1)              \
-    integerMulLeg(b0,z1,ui)    \
-    reduceFromDoubleLeg(z1,b0) \
-    addSub(x1,z1)              \
-    integerSqrLeg(b0,x1)       \
-    integerSqrLeg(b1,z1)       \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1) \
-    integerMulLeg(b0,x1,z2)    \
-    integerMulLeg(b1,z1,x2)    \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1)
-
-#define difAddBmi2Adx          \
-    addSub(x1,z1)              \
-    integerMulAdx(b0,z1,ui)    \
-    reduceFromDoubleAdx(z1,b0) \
-    addSub(x1,z1)              \
-    integerSqrAdx(b0,x1)       \
-    integerSqrAdx(b1,z1)       \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1) \
-    integerMulAdx(b0,x1,z2)    \
-    integerMulAdx(b1,z1,x2)    \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1)
-
-#define doubleLeg              \
-    addSub(x1,z1)              \
-    integerSqrLeg(b0,x1)       \
-    integerSqrLeg(b1,z1)       \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1) \
-    subtraction(t0,x1,z1)      \
-    multiplyA24Leg(t1,t0)      \
-    additionLeg(t1,t1,z1)      \
-    integerMulLeg(b0,x1,z1)    \
-    integerMulLeg(b1,t0,t1)    \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1)
-
-#define doubleBmi2Adx          \
-    addSub(x1,z1)              \
-    integerSqrAdx(b0,x1)       \
-    integerSqrAdx(b1,z1)       \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1) \
-    subtraction(t0,x1,z1)      \
-    multiplyA24Adx(t1,t0)      \
-    additionAdx(t1,t1,z1)      \
-    integerMulAdx(b0,x1,z1)    \
-    integerMulAdx(b1,t0,t1)    \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1)
diff --git a/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.s b/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.s
deleted file mode 100644
index b7723185..00000000
--- a/vendor/github.com/cloudflare/circl/dh/x25519/curve_amd64.s
+++ /dev/null
@@ -1,156 +0,0 @@
-// +build amd64
-
-#include "textflag.h"
-
-// Depends on circl/math/fp25519 package
-#include "../../math/fp25519/fp_amd64.h"
-#include "curve_amd64.h"
-
-// CTE_A24 is (A+2)/4 from Curve25519
-#define CTE_A24 121666
-
-#define Size 32
-
-// multiplyA24Leg multiplies x times CTE_A24 and stores in z
-// Uses: AX, DX, R8-R13, FLAGS
-// Instr: x86_64, cmov
-#define multiplyA24Leg(z,x) \
-    MOVL $CTE_A24, AX; MULQ  0+x; MOVQ AX,  R8; MOVQ DX,  R9; \
-    MOVL $CTE_A24, AX; MULQ  8+x; MOVQ AX, R12; MOVQ DX, R10; \
-    MOVL $CTE_A24, AX; MULQ 16+x; MOVQ AX, R13; MOVQ DX, R11; \
-    MOVL $CTE_A24, AX; MULQ 24+x; \
-    ADDQ R12,  R9; \
-    ADCQ R13, R10; \
-    ADCQ  AX, R11; \
-    ADCQ  $0,  DX; \
-    MOVL $38,  AX; /* 2*C = 38 = 2^256 MOD 2^255-19*/ \
-    IMULQ AX, DX; \
-    ADDQ DX, R8; \
-    ADCQ $0,  R9;  MOVQ  R9,  8+z; \
-    ADCQ $0, R10;  MOVQ R10, 16+z; \
-    ADCQ $0, R11;  MOVQ R11, 24+z; \
-    MOVQ $0, DX; \
-    CMOVQCS AX, DX; \
-    ADDQ DX, R8;  MOVQ  R8,   0+z;
-
-// multiplyA24Adx multiplies x times CTE_A24 and stores in z
-// Uses: AX, DX, R8-R12, FLAGS
-// Instr: x86_64, cmov, bmi2
-#define multiplyA24Adx(z,x) \
-    MOVQ  $CTE_A24, DX; \
-    MULXQ  0+x,  R8, R10; \
-    MULXQ  8+x,  R9, R11;  ADDQ R10,  R9; \
-    MULXQ 16+x, R10,  AX;  ADCQ R11, R10; \
-    MULXQ 24+x, R11, R12;  ADCQ  AX, R11; \
-    ;;;;;;;;;;;;;;;;;;;;;  ADCQ  $0, R12; \
-    MOVL $38,  DX; /* 2*C = 38 = 2^256 MOD 2^255-19*/ \
-    IMULQ DX, R12; \
-    ADDQ R12, R8; \
-    ADCQ $0,  R9;  MOVQ  R9,  8+z; \
-    ADCQ $0, R10;  MOVQ R10, 16+z; \
-    ADCQ $0, R11;  MOVQ R11, 24+z; \
-    MOVQ $0, R12; \
-    CMOVQCS DX, R12; \
-    ADDQ R12, R8;  MOVQ  R8,  0+z;
-
-#define mulA24Legacy \
-    multiplyA24Leg(0(DI),0(SI))
-#define mulA24Bmi2Adx \
-    multiplyA24Adx(0(DI),0(SI))
-
-// func mulA24Amd64(z, x *fp255.Elt)
-TEXT 路mulA24Amd64(SB),NOSPLIT,$0-16
-    MOVQ z+0(FP), DI
-    MOVQ x+8(FP), SI
-    CHECK_BMI2ADX(LMA24, mulA24Legacy, mulA24Bmi2Adx)
-
-
-// func ladderStepAmd64(w *[5]fp255.Elt, b uint)
-// ladderStepAmd64 calculates a point addition and doubling as follows:
-// (x2,z2) = 2*(x2,z2) and (x3,z3) = (x2,z2)+(x3,z3) using as a difference (x1,-).
-//  work  = (x1,x2,z2,x3,z3) are five fp255.Elt of 32 bytes.
-//  stack = (t0,t1) are two fp.Elt of fp.Size bytes, and
-//          (b0,b1) are two-double precision fp.Elt of 2*fp.Size bytes.
-TEXT 路ladderStepAmd64(SB),NOSPLIT,$192-16
-    // Parameters
-    #define regWork DI
-    #define regMove SI
-    #define x1 0*Size(regWork)
-    #define x2 1*Size(regWork)
-    #define z2 2*Size(regWork)
-    #define x3 3*Size(regWork)
-    #define z3 4*Size(regWork)
-    // Local variables
-    #define t0 0*Size(SP)
-    #define t1 1*Size(SP)
-    #define b0 2*Size(SP)
-    #define b1 4*Size(SP)
-    MOVQ w+0(FP), regWork
-    MOVQ b+8(FP), regMove
-    CHECK_BMI2ADX(LLADSTEP, ladderStepLeg, ladderStepBmi2Adx)
-    #undef regWork
-    #undef regMove
-    #undef x1
-    #undef x2
-    #undef z2
-    #undef x3
-    #undef z3
-    #undef t0
-    #undef t1
-    #undef b0
-    #undef b1
-
-// func diffAddAmd64(w *[5]fp255.Elt, b uint)
-// diffAddAmd64 calculates a differential point addition using a precomputed point.
-// (x1,z1) = (x1,z1)+(mu) using a difference point (x2,z2)
-//    w    = (mu,x1,z1,x2,z2) are five fp.Elt, and
-//   stack = (b0,b1) are two-double precision fp.Elt of 2*fp.Size bytes.
-TEXT 路diffAddAmd64(SB),NOSPLIT,$128-16
-    // Parameters
-    #define regWork DI
-    #define regSwap SI
-    #define ui 0*Size(regWork)
-    #define x1 1*Size(regWork)
-    #define z1 2*Size(regWork)
-    #define x2 3*Size(regWork)
-    #define z2 4*Size(regWork)
-    // Local variables
-    #define b0 0*Size(SP)
-    #define b1 2*Size(SP)
-    MOVQ w+0(FP), regWork
-    MOVQ b+8(FP), regSwap
-    cswap(x1,x2,regSwap)
-    cswap(z1,z2,regSwap)
-    CHECK_BMI2ADX(LDIFADD, difAddLeg, difAddBmi2Adx)
-    #undef regWork
-    #undef regSwap
-    #undef ui
-    #undef x1
-    #undef z1
-    #undef x2
-    #undef z2
-    #undef b0
-    #undef b1
-
-// func doubleAmd64(x, z *fp255.Elt)
-// doubleAmd64 calculates a point doubling (x1,z1) = 2*(x1,z1).
-//  stack = (t0,t1) are two fp.Elt of fp.Size bytes, and
-//          (b0,b1) are two-double precision fp.Elt of 2*fp.Size bytes.
-TEXT 路doubleAmd64(SB),NOSPLIT,$192-16
-    // Parameters
-    #define x1 0(DI)
-    #define z1 0(SI)
-    // Local variables
-    #define t0 0*Size(SP)
-    #define t1 1*Size(SP)
-    #define b0 2*Size(SP)
-    #define b1 4*Size(SP)
-    MOVQ x+0(FP), DI
-    MOVQ z+8(FP), SI
-    CHECK_BMI2ADX(LDOUB,doubleLeg,doubleBmi2Adx)
-    #undef x1
-    #undef z1
-    #undef t0
-    #undef t1
-    #undef b0
-    #undef b1
diff --git a/vendor/github.com/cloudflare/circl/dh/x25519/curve_noasm.go b/vendor/github.com/cloudflare/circl/dh/x25519/curve_noasm.go
index 07fab97d..1661cd6f 100644
--- a/vendor/github.com/cloudflare/circl/dh/x25519/curve_noasm.go
+++ b/vendor/github.com/cloudflare/circl/dh/x25519/curve_noasm.go
@@ -1,6 +1,3 @@
-//go:build !amd64 || purego
-// +build !amd64 purego
-
 package x25519
 
 import fp "github.com/cloudflare/circl/math/fp25519"
diff --git a/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.go b/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.go
deleted file mode 100644
index a0622666..00000000
--- a/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.go
+++ /dev/null
@@ -1,30 +0,0 @@
-//go:build amd64 && !purego
-// +build amd64,!purego
-
-package x448
-
-import (
-	fp "github.com/cloudflare/circl/math/fp448"
-	"golang.org/x/sys/cpu"
-)
-
-var hasBmi2Adx = cpu.X86.HasBMI2 && cpu.X86.HasADX
-
-var _ = hasBmi2Adx
-
-func double(x, z *fp.Elt)             { doubleAmd64(x, z) }
-func diffAdd(w *[5]fp.Elt, b uint)    { diffAddAmd64(w, b) }
-func ladderStep(w *[5]fp.Elt, b uint) { ladderStepAmd64(w, b) }
-func mulA24(z, x *fp.Elt)             { mulA24Amd64(z, x) }
-
-//go:noescape
-func doubleAmd64(x, z *fp.Elt)
-
-//go:noescape
-func diffAddAmd64(w *[5]fp.Elt, b uint)
-
-//go:noescape
-func ladderStepAmd64(w *[5]fp.Elt, b uint)
-
-//go:noescape
-func mulA24Amd64(z, x *fp.Elt)
diff --git a/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.h b/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.h
deleted file mode 100644
index 8c1ae4d0..00000000
--- a/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.h
+++ /dev/null
@@ -1,111 +0,0 @@
-#define ladderStepLeg          \
-    addSub(x2,z2)              \
-    addSub(x3,z3)              \
-    integerMulLeg(b0,x2,z3)    \
-    integerMulLeg(b1,x3,z2)    \
-    reduceFromDoubleLeg(t0,b0) \
-    reduceFromDoubleLeg(t1,b1) \
-    addSub(t0,t1)              \
-    cselect(x2,x3,regMove)     \
-    cselect(z2,z3,regMove)     \
-    integerSqrLeg(b0,t0)       \
-    integerSqrLeg(b1,t1)       \
-    reduceFromDoubleLeg(x3,b0) \
-    reduceFromDoubleLeg(z3,b1) \
-    integerMulLeg(b0,x1,z3)    \
-    reduceFromDoubleLeg(z3,b0) \
-    integerSqrLeg(b0,x2)       \
-    integerSqrLeg(b1,z2)       \
-    reduceFromDoubleLeg(x2,b0) \
-    reduceFromDoubleLeg(z2,b1) \
-    subtraction(t0,x2,z2)      \
-    multiplyA24Leg(t1,t0)      \
-    additionLeg(t1,t1,z2)      \
-    integerMulLeg(b0,x2,z2)    \
-    integerMulLeg(b1,t0,t1)    \
-    reduceFromDoubleLeg(x2,b0) \
-    reduceFromDoubleLeg(z2,b1)
-
-#define ladderStepBmi2Adx      \
-    addSub(x2,z2)              \
-    addSub(x3,z3)              \
-    integerMulAdx(b0,x2,z3)    \
-    integerMulAdx(b1,x3,z2)    \
-    reduceFromDoubleAdx(t0,b0) \
-    reduceFromDoubleAdx(t1,b1) \
-    addSub(t0,t1)              \
-    cselect(x2,x3,regMove)     \
-    cselect(z2,z3,regMove)     \
-    integerSqrAdx(b0,t0)       \
-    integerSqrAdx(b1,t1)       \
-    reduceFromDoubleAdx(x3,b0) \
-    reduceFromDoubleAdx(z3,b1) \
-    integerMulAdx(b0,x1,z3)    \
-    reduceFromDoubleAdx(z3,b0) \
-    integerSqrAdx(b0,x2)       \
-    integerSqrAdx(b1,z2)       \
-    reduceFromDoubleAdx(x2,b0) \
-    reduceFromDoubleAdx(z2,b1) \
-    subtraction(t0,x2,z2)      \
-    multiplyA24Adx(t1,t0)      \
-    additionAdx(t1,t1,z2)      \
-    integerMulAdx(b0,x2,z2)    \
-    integerMulAdx(b1,t0,t1)    \
-    reduceFromDoubleAdx(x2,b0) \
-    reduceFromDoubleAdx(z2,b1)
-
-#define difAddLeg              \
-    addSub(x1,z1)              \
-    integerMulLeg(b0,z1,ui)    \
-    reduceFromDoubleLeg(z1,b0) \
-    addSub(x1,z1)              \
-    integerSqrLeg(b0,x1)       \
-    integerSqrLeg(b1,z1)       \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1) \
-    integerMulLeg(b0,x1,z2)    \
-    integerMulLeg(b1,z1,x2)    \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1)
-
-#define difAddBmi2Adx          \
-    addSub(x1,z1)              \
-    integerMulAdx(b0,z1,ui)    \
-    reduceFromDoubleAdx(z1,b0) \
-    addSub(x1,z1)              \
-    integerSqrAdx(b0,x1)       \
-    integerSqrAdx(b1,z1)       \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1) \
-    integerMulAdx(b0,x1,z2)    \
-    integerMulAdx(b1,z1,x2)    \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1)
-
-#define doubleLeg              \
-    addSub(x1,z1)              \
-    integerSqrLeg(b0,x1)       \
-    integerSqrLeg(b1,z1)       \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1) \
-    subtraction(t0,x1,z1)      \
-    multiplyA24Leg(t1,t0)      \
-    additionLeg(t1,t1,z1)      \
-    integerMulLeg(b0,x1,z1)    \
-    integerMulLeg(b1,t0,t1)    \
-    reduceFromDoubleLeg(x1,b0) \
-    reduceFromDoubleLeg(z1,b1)
-
-#define doubleBmi2Adx          \
-    addSub(x1,z1)              \
-    integerSqrAdx(b0,x1)       \
-    integerSqrAdx(b1,z1)       \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1) \
-    subtraction(t0,x1,z1)      \
-    multiplyA24Adx(t1,t0)      \
-    additionAdx(t1,t1,z1)      \
-    integerMulAdx(b0,x1,z1)    \
-    integerMulAdx(b1,t0,t1)    \
-    reduceFromDoubleAdx(x1,b0) \
-    reduceFromDoubleAdx(z1,b1)
diff --git a/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.s b/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.s
deleted file mode 100644
index 810aa9e6..00000000
--- a/vendor/github.com/cloudflare/circl/dh/x448/curve_amd64.s
+++ /dev/null
@@ -1,193 +0,0 @@
-// +build amd64
-
-#include "textflag.h"
-
-// Depends on circl/math/fp448 package
-#include "../../math/fp448/fp_amd64.h"
-#include "curve_amd64.h"
-
-// CTE_A24 is (A+2)/4 from Curve448
-#define CTE_A24 39082
-
-#define Size 56
-
-// multiplyA24Leg multiplies x times CTE_A24 and stores in z
-// Uses: AX, DX, R8-R15, FLAGS
-// Instr: x86_64, cmov, adx
-#define multiplyA24Leg(z,x) \
-    MOVQ $CTE_A24, R15; \
-    MOVQ  0+x, AX; MULQ R15; MOVQ AX,  R8; ;;;;;;;;;;;;  MOVQ DX,  R9; \
-    MOVQ  8+x, AX; MULQ R15; ADDQ AX,  R9; ADCQ $0, DX;  MOVQ DX, R10; \
-    MOVQ 16+x, AX; MULQ R15; ADDQ AX, R10; ADCQ $0, DX;  MOVQ DX, R11; \
-    MOVQ 24+x, AX; MULQ R15; ADDQ AX, R11; ADCQ $0, DX;  MOVQ DX, R12; \
-    MOVQ 32+x, AX; MULQ R15; ADDQ AX, R12; ADCQ $0, DX;  MOVQ DX, R13; \
-    MOVQ 40+x, AX; MULQ R15; ADDQ AX, R13; ADCQ $0, DX;  MOVQ DX, R14; \
-    MOVQ 48+x, AX; MULQ R15; ADDQ AX, R14; ADCQ $0, DX; \
-    MOVQ DX,  AX; \
-    SHLQ $32, AX; \
-    ADDQ DX,  R8; MOVQ $0, DX; \
-    ADCQ $0,  R9; \
-    ADCQ $0, R10; \
-    ADCQ AX, R11; \
-    ADCQ $0, R12; \
-    ADCQ $0, R13; \
-    ADCQ $0, R14; \
-    ADCQ $0,  DX; \
-    MOVQ DX,  AX; \
-    SHLQ $32, AX; \
-    ADDQ DX,  R8; \
-    ADCQ $0,  R9; \
-    ADCQ $0, R10; \
-    ADCQ AX, R11; \
-    ADCQ $0, R12; \
-    ADCQ $0, R13; \
-    ADCQ $0, R14; \
-    MOVQ  R8,  0+z; \
-    MOVQ  R9,  8+z; \
-    MOVQ R10, 16+z; \
-    MOVQ R11, 24+z; \
-    MOVQ R12, 32+z; \
-    MOVQ R13, 40+z; \
-    MOVQ R14, 48+z;
-
-// multiplyA24Adx multiplies x times CTE_A24 and stores in z
-// Uses: AX, DX, R8-R14, FLAGS
-// Instr: x86_64, bmi2
-#define multiplyA24Adx(z,x) \
-    MOVQ $CTE_A24, DX; \
-    MULXQ  0+x, R8,  R9; \
-    MULXQ  8+x, AX, R10;  ADDQ AX,  R9; \
-    MULXQ 16+x, AX, R11;  ADCQ AX, R10; \
-    MULXQ 24+x, AX, R12;  ADCQ AX, R11; \
-    MULXQ 32+x, AX, R13;  ADCQ AX, R12; \
-    MULXQ 40+x, AX, R14;  ADCQ AX, R13; \
-    MULXQ 48+x, AX,  DX;  ADCQ AX, R14; \
-    ;;;;;;;;;;;;;;;;;;;;  ADCQ $0,  DX; \
-    MOVQ DX,  AX; \
-    SHLQ $32, AX; \
-    ADDQ DX,  R8; MOVQ $0, DX; \
-    ADCQ $0,  R9; \
-    ADCQ $0, R10; \
-    ADCQ AX, R11; \
-    ADCQ $0, R12; \
-    ADCQ $0, R13; \
-    ADCQ $0, R14; \
-    ADCQ $0,  DX; \
-    MOVQ DX,  AX; \
-    SHLQ $32, AX; \
-    ADDQ DX,  R8; \
-    ADCQ $0,  R9; \
-    ADCQ $0, R10; \
-    ADCQ AX, R11; \
-    ADCQ $0, R12; \
-    ADCQ $0, R13; \
-    ADCQ $0, R14; \
-    MOVQ  R8,  0+z; \
-    MOVQ  R9,  8+z; \
-    MOVQ R10, 16+z; \
-    MOVQ R11, 24+z; \
-    MOVQ R12, 32+z; \
-    MOVQ R13, 40+z; \
-    MOVQ R14, 48+z;
-
-#define mulA24Legacy \
-    multiplyA24Leg(0(DI),0(SI))
-#define mulA24Bmi2Adx \
-    multiplyA24Adx(0(DI),0(SI))
-
-// func mulA24Amd64(z, x *fp448.Elt)
-TEXT 路mulA24Amd64(SB),NOSPLIT,$0-16
-    MOVQ z+0(FP), DI
-    MOVQ x+8(FP), SI
-    CHECK_BMI2ADX(LMA24, mulA24Legacy, mulA24Bmi2Adx)
-
-// func ladderStepAmd64(w *[5]fp448.Elt, b uint)
-// ladderStepAmd64 calculates a point addition and doubling as follows:
-// (x2,z2) = 2*(x2,z2) and (x3,z3) = (x2,z2)+(x3,z3) using as a difference (x1,-).
-//    w    = {x1,x2,z2,x3,z4} are five fp255.Elt of 56 bytes.
-//  stack  = (t0,t1) are two fp.Elt of fp.Size bytes, and
-//           (b0,b1) are two-double precision fp.Elt of 2*fp.Size bytes.
-TEXT 路ladderStepAmd64(SB),NOSPLIT,$336-16
-    // Parameters
-    #define regWork DI
-    #define regMove SI
-    #define x1 0*Size(regWork)
-    #define x2 1*Size(regWork)
-    #define z2 2*Size(regWork)
-    #define x3 3*Size(regWork)
-    #define z3 4*Size(regWork)
-    // Local variables
-    #define t0 0*Size(SP)
-    #define t1 1*Size(SP)
-    #define b0 2*Size(SP)
-    #define b1 4*Size(SP)
-    MOVQ w+0(FP), regWork
-    MOVQ b+8(FP), regMove
-    CHECK_BMI2ADX(LLADSTEP, ladderStepLeg, ladderStepBmi2Adx)
-    #undef regWork
-    #undef regMove
-    #undef x1
-    #undef x2
-    #undef z2
-    #undef x3
-    #undef z3
-    #undef t0
-    #undef t1
-    #undef b0
-    #undef b1
-
-// func diffAddAmd64(work *[5]fp.Elt, swap uint)
-// diffAddAmd64 calculates a differential point addition using a precomputed point.
-// (x1,z1) = (x1,z1)+(mu) using a difference point (x2,z2)
-//    work = {mu,x1,z1,x2,z2} are five fp448.Elt of 56 bytes, and
-//   stack = (b0,b1) are two-double precision fp.Elt of 2*fp.Size bytes.
-// This is Equation 7 at https://eprint.iacr.org/2017/264.
-TEXT 路diffAddAmd64(SB),NOSPLIT,$224-16
-    // Parameters
-    #define regWork DI
-    #define regSwap SI
-    #define ui 0*Size(regWork)
-    #define x1 1*Size(regWork)
-    #define z1 2*Size(regWork)
-    #define x2 3*Size(regWork)
-    #define z2 4*Size(regWork)
-    // Local variables
-    #define b0 0*Size(SP)
-    #define b1 2*Size(SP)
-    MOVQ w+0(FP), regWork
-    MOVQ b+8(FP), regSwap
-    cswap(x1,x2,regSwap)
-    cswap(z1,z2,regSwap)
-    CHECK_BMI2ADX(LDIFADD, difAddLeg, difAddBmi2Adx)
-    #undef regWork
-    #undef regSwap
-    #undef ui
-    #undef x1
-    #undef z1
-    #undef x2
-    #undef z2
-    #undef b0
-    #undef b1
-
-// func doubleAmd64(x, z *fp448.Elt)
-// doubleAmd64 calculates a point doubling (x1,z1) = 2*(x1,z1).
-//  stack = (t0,t1) are two fp.Elt of fp.Size bytes, and
-//          (b0,b1) are two-double precision fp.Elt of 2*fp.Size bytes.
-TEXT 路doubleAmd64(SB),NOSPLIT,$336-16
-    // Parameters
-    #define x1 0(DI)
-    #define z1 0(SI)
-    // Local variables
-    #define t0 0*Size(SP)
-    #define t1 1*Size(SP)
-    #define b0 2*Size(SP)
-    #define b1 4*Size(SP)
-    MOVQ x+0(FP), DI
-    MOVQ z+8(FP), SI
-    CHECK_BMI2ADX(LDOUB,doubleLeg,doubleBmi2Adx)
-    #undef x1
-    #undef z1
-    #undef t0
-    #undef t1
-    #undef b0
-    #undef b1
diff --git a/vendor/github.com/cloudflare/circl/dh/x448/curve_noasm.go b/vendor/github.com/cloudflare/circl/dh/x448/curve_noasm.go
index 3755b7c8..3dfa7cc9 100644
--- a/vendor/github.com/cloudflare/circl/dh/x448/curve_noasm.go
+++ b/vendor/github.com/cloudflare/circl/dh/x448/curve_noasm.go
@@ -1,6 +1,3 @@
-//go:build !amd64 || purego
-// +build !amd64 purego
-
 package x448
 
 import fp "github.com/cloudflare/circl/math/fp448"
