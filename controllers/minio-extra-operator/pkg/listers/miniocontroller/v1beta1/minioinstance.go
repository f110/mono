/*
MIT License

Copyright (c) 2020 Fumihiro Ito

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/minio/minio-operator/pkg/apis/miniocontroller/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MinIOInstanceLister helps list MinIOInstances.
type MinIOInstanceLister interface {
	// List lists all MinIOInstances in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error)
	// MinIOInstances returns an object that can list and get MinIOInstances.
	MinIOInstances(namespace string) MinIOInstanceNamespaceLister
	MinIOInstanceListerExpansion
}

// minIOInstanceLister implements the MinIOInstanceLister interface.
type minIOInstanceLister struct {
	indexer cache.Indexer
}

// NewMinIOInstanceLister returns a new MinIOInstanceLister.
func NewMinIOInstanceLister(indexer cache.Indexer) MinIOInstanceLister {
	return &minIOInstanceLister{indexer: indexer}
}

// List lists all MinIOInstances in the indexer.
func (s *minIOInstanceLister) List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MinIOInstance))
	})
	return ret, err
}

// MinIOInstances returns an object that can list and get MinIOInstances.
func (s *minIOInstanceLister) MinIOInstances(namespace string) MinIOInstanceNamespaceLister {
	return minIOInstanceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MinIOInstanceNamespaceLister helps list and get MinIOInstances.
type MinIOInstanceNamespaceLister interface {
	// List lists all MinIOInstances in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error)
	// Get retrieves the MinIOInstance from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.MinIOInstance, error)
	MinIOInstanceNamespaceListerExpansion
}

// minIOInstanceNamespaceLister implements the MinIOInstanceNamespaceLister
// interface.
type minIOInstanceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MinIOInstances in the indexer for a given namespace.
func (s minIOInstanceNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.MinIOInstance, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.MinIOInstance))
	})
	return ret, err
}

// Get retrieves the MinIOInstance from the indexer for a given namespace and name.
func (s minIOInstanceNamespaceLister) Get(name string) (*v1beta1.MinIOInstance, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("minioinstance"), name)
	}
	return obj.(*v1beta1.MinIOInstance), nil
}
