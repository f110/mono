load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")

go_binary(
    name = "controller-manager",
    embed = [":controller-manager_lib"],
    visibility = ["//visibility:public"],
)

go_library(
    name = "controller-manager_lib",
    srcs = ["main.go"],
    importpath = "go.f110.dev/mono/go/cmd/controller-manager",
    visibility = ["//visibility:private"],
    deps = [
        "//go/pkg/fsm",
        "//go/pkg/k8s/client/versioned",
        "//go/pkg/k8s/controllers/grafana",
        "//go/pkg/k8s/controllers/harbor",
        "//go/pkg/k8s/controllers/minio",
        "//go/pkg/k8s/informers/externalversions",
        "//go/pkg/k8s/probe",
        "//go/pkg/logger",
        "//vendor/github.com/google/uuid",
        "//vendor/github.com/spf13/pflag",
        "//vendor/golang.org/x/xerrors",
        "//vendor/k8s.io/apimachinery/pkg/apis/meta/v1:meta",
        "//vendor/k8s.io/client-go/informers",
        "//vendor/k8s.io/client-go/kubernetes",
        "//vendor/k8s.io/client-go/rest",
        "//vendor/k8s.io/client-go/tools/clientcmd",
        "//vendor/k8s.io/client-go/tools/leaderelection",
        "//vendor/k8s.io/client-go/tools/leaderelection/resourcelock",
        "//vendor/k8s.io/component-base/metrics/legacyregistry",
        "//vendor/k8s.io/klog",
    ],
)

sh_binary(
    name = "run",
    srcs = ["//go/cmd/monodev"],
    args = [
        "cluster",
        "run",
        "--kind=$(location @kind//:file)",
        "--manifest=$(location //manifests/deploy/controller-manager/dev:dev)",
        "--images=registry.f110.dev/tools/controller-manager:latest=$(location //containers/controller-manager:image.tar)",
    ],
    data = [
        "//containers/controller-manager:image.tar",
        "//manifests/deploy/controller-manager/dev",
        "@kind//:file",
    ],
)
