// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.1
// source: proto/git/data.proto

package git

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	Hash   string `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{0}
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reference) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Reference) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type TreeEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Mode string `protobuf:"bytes,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Sha  string `protobuf:"bytes,3,opt,name=sha,proto3" json:"sha,omitempty"`
	Size int64  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *TreeEntry) Reset() {
	*x = TreeEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeEntry) ProtoMessage() {}

func (x *TreeEntry) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeEntry.ProtoReflect.Descriptor instead.
func (*TreeEntry) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{1}
}

func (x *TreeEntry) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *TreeEntry) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *TreeEntry) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *TreeEntry) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha       string     `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Author    *Signature `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Committer *Signature `protobuf:"bytes,3,opt,name=committer,proto3" json:"committer,omitempty"`
	Tree      string     `protobuf:"bytes,4,opt,name=tree,proto3" json:"tree,omitempty"`
	Message   string     `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	Parents   []string   `protobuf:"bytes,6,rep,name=parents,proto3" json:"parents,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{2}
}

func (x *Commit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *Commit) GetAuthor() *Signature {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Commit) GetCommitter() *Signature {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *Commit) GetTree() string {
	if x != nil {
		return x.Tree
	}
	return ""
}

func (x *Commit) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Commit) GetParents() []string {
	if x != nil {
		return x.Parents
	}
	return nil
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{3}
}

func (x *Signature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Signature) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type Repository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DefaultBranch string `protobuf:"bytes,2,opt,name=default_branch,json=defaultBranch,proto3" json:"default_branch,omitempty"`
	Url           string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	GitUrl        string `protobuf:"bytes,4,opt,name=git_url,json=gitUrl,proto3" json:"git_url,omitempty"`
}

func (x *Repository) Reset() {
	*x = Repository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Repository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Repository) ProtoMessage() {}

func (x *Repository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Repository.ProtoReflect.Descriptor instead.
func (*Repository) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{4}
}

func (x *Repository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Repository) GetDefaultBranch() string {
	if x != nil {
		return x.DefaultBranch
	}
	return ""
}

func (x *Repository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Repository) GetGitUrl() string {
	if x != nil {
		return x.GitUrl
	}
	return ""
}

type RequestListRepositories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RequestListRepositories) Reset() {
	*x = RequestListRepositories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestListRepositories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListRepositories) ProtoMessage() {}

func (x *RequestListRepositories) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListRepositories.ProtoReflect.Descriptor instead.
func (*RequestListRepositories) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{5}
}

type ResponseListRepositories struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repositories []*Repository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
}

func (x *ResponseListRepositories) Reset() {
	*x = ResponseListRepositories{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListRepositories) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListRepositories) ProtoMessage() {}

func (x *ResponseListRepositories) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListRepositories.ProtoReflect.Descriptor instead.
func (*ResponseListRepositories) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{6}
}

func (x *ResponseListRepositories) GetRepositories() []*Repository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type RequestListReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RequestListReferences) Reset() {
	*x = RequestListReferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestListReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListReferences) ProtoMessage() {}

func (x *RequestListReferences) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListReferences.ProtoReflect.Descriptor instead.
func (*RequestListReferences) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{7}
}

func (x *RequestListReferences) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type ResponseListReferences struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refs []*Reference `protobuf:"bytes,1,rep,name=refs,proto3" json:"refs,omitempty"`
}

func (x *ResponseListReferences) Reset() {
	*x = ResponseListReferences{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListReferences) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListReferences) ProtoMessage() {}

func (x *ResponseListReferences) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListReferences.ProtoReflect.Descriptor instead.
func (*ResponseListReferences) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{8}
}

func (x *ResponseListReferences) GetRefs() []*Reference {
	if x != nil {
		return x.Refs
	}
	return nil
}

type RequestGetRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RequestGetRepository) Reset() {
	*x = RequestGetRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetRepository) ProtoMessage() {}

func (x *RequestGetRepository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetRepository.ProtoReflect.Descriptor instead.
func (*RequestGetRepository) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{9}
}

func (x *RequestGetRepository) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type ResponseGetRepository struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Hosting string `protobuf:"bytes,3,opt,name=hosting,proto3" json:"hosting,omitempty"`
}

func (x *ResponseGetRepository) Reset() {
	*x = ResponseGetRepository{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetRepository) ProtoMessage() {}

func (x *ResponseGetRepository) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetRepository.ProtoReflect.Descriptor instead.
func (*ResponseGetRepository) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{10}
}

func (x *ResponseGetRepository) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResponseGetRepository) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ResponseGetRepository) GetHosting() string {
	if x != nil {
		return x.Hosting
	}
	return ""
}

type RequestGetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Ref  string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *RequestGetReference) Reset() {
	*x = RequestGetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetReference) ProtoMessage() {}

func (x *RequestGetReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetReference.ProtoReflect.Descriptor instead.
func (*RequestGetReference) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{11}
}

func (x *RequestGetReference) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RequestGetReference) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

type ResponseGetReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref *Reference `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *ResponseGetReference) Reset() {
	*x = ResponseGetReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetReference) ProtoMessage() {}

func (x *ResponseGetReference) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetReference.ProtoReflect.Descriptor instead.
func (*ResponseGetReference) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{12}
}

func (x *ResponseGetReference) GetRef() *Reference {
	if x != nil {
		return x.Ref
	}
	return nil
}

type RequestGetCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Sha  string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *RequestGetCommit) Reset() {
	*x = RequestGetCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetCommit) ProtoMessage() {}

func (x *RequestGetCommit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetCommit.ProtoReflect.Descriptor instead.
func (*RequestGetCommit) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{13}
}

func (x *RequestGetCommit) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RequestGetCommit) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type ResponseGetCommit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Commit *Commit `protobuf:"bytes,1,opt,name=commit,proto3" json:"commit,omitempty"`
}

func (x *ResponseGetCommit) Reset() {
	*x = ResponseGetCommit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetCommit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetCommit) ProtoMessage() {}

func (x *ResponseGetCommit) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetCommit.ProtoReflect.Descriptor instead.
func (*ResponseGetCommit) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{14}
}

func (x *ResponseGetCommit) GetCommit() *Commit {
	if x != nil {
		return x.Commit
	}
	return nil
}

type RequestGetTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo      string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Sha       string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	Ref       string `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
	Path      string `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Recursive bool   `protobuf:"varint,5,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *RequestGetTree) Reset() {
	*x = RequestGetTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetTree) ProtoMessage() {}

func (x *RequestGetTree) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetTree.ProtoReflect.Descriptor instead.
func (*RequestGetTree) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{15}
}

func (x *RequestGetTree) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RequestGetTree) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *RequestGetTree) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *RequestGetTree) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *RequestGetTree) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type ResponseGetTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha  string       `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Tree []*TreeEntry `protobuf:"bytes,2,rep,name=tree,proto3" json:"tree,omitempty"`
}

func (x *ResponseGetTree) Reset() {
	*x = ResponseGetTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetTree) ProtoMessage() {}

func (x *ResponseGetTree) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetTree.ProtoReflect.Descriptor instead.
func (*ResponseGetTree) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{16}
}

func (x *ResponseGetTree) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ResponseGetTree) GetTree() []*TreeEntry {
	if x != nil {
		return x.Tree
	}
	return nil
}

type RequestGetBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Sha  string `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *RequestGetBlob) Reset() {
	*x = RequestGetBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetBlob) ProtoMessage() {}

func (x *RequestGetBlob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetBlob.ProtoReflect.Descriptor instead.
func (*RequestGetBlob) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{17}
}

func (x *RequestGetBlob) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RequestGetBlob) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type ResponseGetBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sha     string `protobuf:"bytes,1,opt,name=sha,proto3" json:"sha,omitempty"`
	Size    int64  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Content []byte `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *ResponseGetBlob) Reset() {
	*x = ResponseGetBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetBlob) ProtoMessage() {}

func (x *ResponseGetBlob) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetBlob.ProtoReflect.Descriptor instead.
func (*ResponseGetBlob) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{18}
}

func (x *ResponseGetBlob) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *ResponseGetBlob) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ResponseGetBlob) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type RequestGetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Ref  string `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	Path string `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *RequestGetFile) Reset() {
	*x = RequestGetFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestGetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestGetFile) ProtoMessage() {}

func (x *RequestGetFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestGetFile.ProtoReflect.Descriptor instead.
func (*RequestGetFile) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{19}
}

func (x *RequestGetFile) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *RequestGetFile) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *RequestGetFile) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ResponseGetFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	RawUrl  string `protobuf:"bytes,2,opt,name=raw_url,json=rawUrl,proto3" json:"raw_url,omitempty"`
	EditUrl string `protobuf:"bytes,3,opt,name=edit_url,json=editUrl,proto3" json:"edit_url,omitempty"`
	Sha     string `protobuf:"bytes,4,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *ResponseGetFile) Reset() {
	*x = ResponseGetFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetFile) ProtoMessage() {}

func (x *ResponseGetFile) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetFile.ProtoReflect.Descriptor instead.
func (*ResponseGetFile) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseGetFile) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ResponseGetFile) GetRawUrl() string {
	if x != nil {
		return x.RawUrl
	}
	return ""
}

func (x *ResponseGetFile) GetEditUrl() string {
	if x != nil {
		return x.EditUrl
	}
	return ""
}

func (x *ResponseGetFile) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type RequestListTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RequestListTag) Reset() {
	*x = RequestListTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestListTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListTag) ProtoMessage() {}

func (x *RequestListTag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListTag.ProtoReflect.Descriptor instead.
func (*RequestListTag) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{21}
}

func (x *RequestListTag) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type ResponseListTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tags []*Reference `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *ResponseListTag) Reset() {
	*x = ResponseListTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListTag) ProtoMessage() {}

func (x *ResponseListTag) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListTag.ProtoReflect.Descriptor instead.
func (*ResponseListTag) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{22}
}

func (x *ResponseListTag) GetTags() []*Reference {
	if x != nil {
		return x.Tags
	}
	return nil
}

type RequestListBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo string `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
}

func (x *RequestListBranch) Reset() {
	*x = RequestListBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestListBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestListBranch) ProtoMessage() {}

func (x *RequestListBranch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestListBranch.ProtoReflect.Descriptor instead.
func (*RequestListBranch) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{23}
}

func (x *RequestListBranch) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

type ResponseListBranch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Branches []*Reference `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
}

func (x *ResponseListBranch) Reset() {
	*x = ResponseListBranch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_git_data_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseListBranch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseListBranch) ProtoMessage() {}

func (x *ResponseListBranch) ProtoReflect() protoreflect.Message {
	mi := &file_proto_git_data_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseListBranch.ProtoReflect.Descriptor instead.
func (*ResponseListBranch) Descriptor() ([]byte, []int) {
	return file_proto_git_data_proto_rawDescGZIP(), []int{24}
}

func (x *ResponseListBranch) GetBranches() []*Reference {
	if x != nil {
		return x.Branches
	}
	return nil
}

var File_proto_git_data_proto protoreflect.FileDescriptor

var file_proto_git_data_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x69, 0x74, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x22, 0x4b, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x59, 0x0a,
	0x09, 0x54, 0x72, 0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x22, 0xc2, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x35, 0x0a,
	0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x72, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x17, 0x0a, 0x07, 0x67, 0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x67, 0x69, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x38, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x2b, 0x0a, 0x15, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x41, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x04, 0x72, 0x65, 0x66, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x72, 0x65, 0x66, 0x73, 0x22, 0x2a, 0x0a, 0x14, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x57, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x3b,
	0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x3d, 0x0a, 0x14, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x38, 0x0a, 0x10, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x22, 0x3d, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x22, 0x7a, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x22,
	0x4c, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x68, 0x61, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x54, 0x72,
	0x65, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x72, 0x65, 0x65, 0x22, 0x36, 0x0a,
	0x0e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x51, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x4a, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x22, 0x71, 0x0a, 0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x61, 0x77, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x61, 0x77, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x64,
	0x69, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x64,
	0x69, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x22, 0x24, 0x0a, 0x0e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x22, 0x3a, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67,
	0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65,
	0x70, 0x6f, 0x22, 0x45, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x2f, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x32, 0xe9, 0x05, 0x0a, 0x07, 0x47, 0x69,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x59, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x22, 0x2e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x53, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x1a, 0x20, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x1a, 0x1f, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0x1e, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x12, 0x1a, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x1a,
	0x1b, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3e, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65,
	0x65, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x54, 0x72, 0x65, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x3e, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x07,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12, 0x18, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x67, 0x1a, 0x19, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x67, 0x12, 0x47, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x6d, 0x6f, 0x6e,
	0x6f, 0x2e, 0x67, 0x69, 0x74, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x1a, 0x1c, 0x2e, 0x6d, 0x6f, 0x6e, 0x6f, 0x2e, 0x67,
	0x69, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x1d, 0x5a, 0x1b, 0x67, 0x6f, 0x2e, 0x66, 0x31, 0x31, 0x30,
	0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x6f, 0x6e, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67,
	0x2f, 0x67, 0x69, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_git_data_proto_rawDescOnce sync.Once
	file_proto_git_data_proto_rawDescData = file_proto_git_data_proto_rawDesc
)

func file_proto_git_data_proto_rawDescGZIP() []byte {
	file_proto_git_data_proto_rawDescOnce.Do(func() {
		file_proto_git_data_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_git_data_proto_rawDescData)
	})
	return file_proto_git_data_proto_rawDescData
}

var file_proto_git_data_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_proto_git_data_proto_goTypes = []interface{}{
	(*Reference)(nil),                // 0: mono.git.Reference
	(*TreeEntry)(nil),                // 1: mono.git.TreeEntry
	(*Commit)(nil),                   // 2: mono.git.Commit
	(*Signature)(nil),                // 3: mono.git.Signature
	(*Repository)(nil),               // 4: mono.git.Repository
	(*RequestListRepositories)(nil),  // 5: mono.git.RequestListRepositories
	(*ResponseListRepositories)(nil), // 6: mono.git.ResponseListRepositories
	(*RequestListReferences)(nil),    // 7: mono.git.RequestListReferences
	(*ResponseListReferences)(nil),   // 8: mono.git.ResponseListReferences
	(*RequestGetRepository)(nil),     // 9: mono.git.RequestGetRepository
	(*ResponseGetRepository)(nil),    // 10: mono.git.ResponseGetRepository
	(*RequestGetReference)(nil),      // 11: mono.git.RequestGetReference
	(*ResponseGetReference)(nil),     // 12: mono.git.ResponseGetReference
	(*RequestGetCommit)(nil),         // 13: mono.git.RequestGetCommit
	(*ResponseGetCommit)(nil),        // 14: mono.git.ResponseGetCommit
	(*RequestGetTree)(nil),           // 15: mono.git.RequestGetTree
	(*ResponseGetTree)(nil),          // 16: mono.git.ResponseGetTree
	(*RequestGetBlob)(nil),           // 17: mono.git.RequestGetBlob
	(*ResponseGetBlob)(nil),          // 18: mono.git.ResponseGetBlob
	(*RequestGetFile)(nil),           // 19: mono.git.RequestGetFile
	(*ResponseGetFile)(nil),          // 20: mono.git.ResponseGetFile
	(*RequestListTag)(nil),           // 21: mono.git.RequestListTag
	(*ResponseListTag)(nil),          // 22: mono.git.ResponseListTag
	(*RequestListBranch)(nil),        // 23: mono.git.RequestListBranch
	(*ResponseListBranch)(nil),       // 24: mono.git.ResponseListBranch
}
var file_proto_git_data_proto_depIdxs = []int32{
	3,  // 0: mono.git.Commit.author:type_name -> mono.git.Signature
	3,  // 1: mono.git.Commit.committer:type_name -> mono.git.Signature
	4,  // 2: mono.git.ResponseListRepositories.repositories:type_name -> mono.git.Repository
	0,  // 3: mono.git.ResponseListReferences.refs:type_name -> mono.git.Reference
	0,  // 4: mono.git.ResponseGetReference.ref:type_name -> mono.git.Reference
	2,  // 5: mono.git.ResponseGetCommit.commit:type_name -> mono.git.Commit
	1,  // 6: mono.git.ResponseGetTree.tree:type_name -> mono.git.TreeEntry
	0,  // 7: mono.git.ResponseListTag.tags:type_name -> mono.git.Reference
	0,  // 8: mono.git.ResponseListBranch.branches:type_name -> mono.git.Reference
	5,  // 9: mono.git.GitData.ListRepositories:input_type -> mono.git.RequestListRepositories
	7,  // 10: mono.git.GitData.ListReferences:input_type -> mono.git.RequestListReferences
	9,  // 11: mono.git.GitData.GetRepository:input_type -> mono.git.RequestGetRepository
	11, // 12: mono.git.GitData.GetReference:input_type -> mono.git.RequestGetReference
	13, // 13: mono.git.GitData.GetCommit:input_type -> mono.git.RequestGetCommit
	15, // 14: mono.git.GitData.GetTree:input_type -> mono.git.RequestGetTree
	17, // 15: mono.git.GitData.GetBlob:input_type -> mono.git.RequestGetBlob
	19, // 16: mono.git.GitData.GetFile:input_type -> mono.git.RequestGetFile
	21, // 17: mono.git.GitData.ListTag:input_type -> mono.git.RequestListTag
	23, // 18: mono.git.GitData.ListBranch:input_type -> mono.git.RequestListBranch
	6,  // 19: mono.git.GitData.ListRepositories:output_type -> mono.git.ResponseListRepositories
	8,  // 20: mono.git.GitData.ListReferences:output_type -> mono.git.ResponseListReferences
	10, // 21: mono.git.GitData.GetRepository:output_type -> mono.git.ResponseGetRepository
	12, // 22: mono.git.GitData.GetReference:output_type -> mono.git.ResponseGetReference
	14, // 23: mono.git.GitData.GetCommit:output_type -> mono.git.ResponseGetCommit
	16, // 24: mono.git.GitData.GetTree:output_type -> mono.git.ResponseGetTree
	18, // 25: mono.git.GitData.GetBlob:output_type -> mono.git.ResponseGetBlob
	20, // 26: mono.git.GitData.GetFile:output_type -> mono.git.ResponseGetFile
	22, // 27: mono.git.GitData.ListTag:output_type -> mono.git.ResponseListTag
	24, // 28: mono.git.GitData.ListBranch:output_type -> mono.git.ResponseListBranch
	19, // [19:29] is the sub-list for method output_type
	9,  // [9:19] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_git_data_proto_init() }
func file_proto_git_data_proto_init() {
	if File_proto_git_data_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_git_data_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Repository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestListRepositories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListRepositories); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestListReferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListReferences); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetRepository); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetCommit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestGetFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseGetFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestListTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestListBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_git_data_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseListBranch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_git_data_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_git_data_proto_goTypes,
		DependencyIndexes: file_proto_git_data_proto_depIdxs,
		MessageInfos:      file_proto_git_data_proto_msgTypes,
	}.Build()
	File_proto_git_data_proto = out.File
	file_proto_git_data_proto_rawDesc = nil
	file_proto_git_data_proto_goTypes = nil
	file_proto_git_data_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GitDataClient is the client API for GitData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GitDataClient interface {
	ListRepositories(ctx context.Context, in *RequestListRepositories, opts ...grpc.CallOption) (*ResponseListRepositories, error)
	ListReferences(ctx context.Context, in *RequestListReferences, opts ...grpc.CallOption) (*ResponseListReferences, error)
	GetRepository(ctx context.Context, in *RequestGetRepository, opts ...grpc.CallOption) (*ResponseGetRepository, error)
	GetReference(ctx context.Context, in *RequestGetReference, opts ...grpc.CallOption) (*ResponseGetReference, error)
	GetCommit(ctx context.Context, in *RequestGetCommit, opts ...grpc.CallOption) (*ResponseGetCommit, error)
	GetTree(ctx context.Context, in *RequestGetTree, opts ...grpc.CallOption) (*ResponseGetTree, error)
	GetBlob(ctx context.Context, in *RequestGetBlob, opts ...grpc.CallOption) (*ResponseGetBlob, error)
	GetFile(ctx context.Context, in *RequestGetFile, opts ...grpc.CallOption) (*ResponseGetFile, error)
	ListTag(ctx context.Context, in *RequestListTag, opts ...grpc.CallOption) (*ResponseListTag, error)
	ListBranch(ctx context.Context, in *RequestListBranch, opts ...grpc.CallOption) (*ResponseListBranch, error)
}

type gitDataClient struct {
	cc grpc.ClientConnInterface
}

func NewGitDataClient(cc grpc.ClientConnInterface) GitDataClient {
	return &gitDataClient{cc}
}

func (c *gitDataClient) ListRepositories(ctx context.Context, in *RequestListRepositories, opts ...grpc.CallOption) (*ResponseListRepositories, error) {
	out := new(ResponseListRepositories)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) ListReferences(ctx context.Context, in *RequestListReferences, opts ...grpc.CallOption) (*ResponseListReferences, error) {
	out := new(ResponseListReferences)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/ListReferences", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) GetRepository(ctx context.Context, in *RequestGetRepository, opts ...grpc.CallOption) (*ResponseGetRepository, error) {
	out := new(ResponseGetRepository)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/GetRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) GetReference(ctx context.Context, in *RequestGetReference, opts ...grpc.CallOption) (*ResponseGetReference, error) {
	out := new(ResponseGetReference)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/GetReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) GetCommit(ctx context.Context, in *RequestGetCommit, opts ...grpc.CallOption) (*ResponseGetCommit, error) {
	out := new(ResponseGetCommit)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/GetCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) GetTree(ctx context.Context, in *RequestGetTree, opts ...grpc.CallOption) (*ResponseGetTree, error) {
	out := new(ResponseGetTree)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/GetTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) GetBlob(ctx context.Context, in *RequestGetBlob, opts ...grpc.CallOption) (*ResponseGetBlob, error) {
	out := new(ResponseGetBlob)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/GetBlob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) GetFile(ctx context.Context, in *RequestGetFile, opts ...grpc.CallOption) (*ResponseGetFile, error) {
	out := new(ResponseGetFile)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) ListTag(ctx context.Context, in *RequestListTag, opts ...grpc.CallOption) (*ResponseListTag, error) {
	out := new(ResponseListTag)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/ListTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gitDataClient) ListBranch(ctx context.Context, in *RequestListBranch, opts ...grpc.CallOption) (*ResponseListBranch, error) {
	out := new(ResponseListBranch)
	err := c.cc.Invoke(ctx, "/mono.git.GitData/ListBranch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GitDataServer is the server API for GitData service.
type GitDataServer interface {
	ListRepositories(context.Context, *RequestListRepositories) (*ResponseListRepositories, error)
	ListReferences(context.Context, *RequestListReferences) (*ResponseListReferences, error)
	GetRepository(context.Context, *RequestGetRepository) (*ResponseGetRepository, error)
	GetReference(context.Context, *RequestGetReference) (*ResponseGetReference, error)
	GetCommit(context.Context, *RequestGetCommit) (*ResponseGetCommit, error)
	GetTree(context.Context, *RequestGetTree) (*ResponseGetTree, error)
	GetBlob(context.Context, *RequestGetBlob) (*ResponseGetBlob, error)
	GetFile(context.Context, *RequestGetFile) (*ResponseGetFile, error)
	ListTag(context.Context, *RequestListTag) (*ResponseListTag, error)
	ListBranch(context.Context, *RequestListBranch) (*ResponseListBranch, error)
}

// UnimplementedGitDataServer can be embedded to have forward compatible implementations.
type UnimplementedGitDataServer struct {
}

func (*UnimplementedGitDataServer) ListRepositories(context.Context, *RequestListRepositories) (*ResponseListRepositories, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedGitDataServer) ListReferences(context.Context, *RequestListReferences) (*ResponseListReferences, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReferences not implemented")
}
func (*UnimplementedGitDataServer) GetRepository(context.Context, *RequestGetRepository) (*ResponseGetRepository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepository not implemented")
}
func (*UnimplementedGitDataServer) GetReference(context.Context, *RequestGetReference) (*ResponseGetReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReference not implemented")
}
func (*UnimplementedGitDataServer) GetCommit(context.Context, *RequestGetCommit) (*ResponseGetCommit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommit not implemented")
}
func (*UnimplementedGitDataServer) GetTree(context.Context, *RequestGetTree) (*ResponseGetTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTree not implemented")
}
func (*UnimplementedGitDataServer) GetBlob(context.Context, *RequestGetBlob) (*ResponseGetBlob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (*UnimplementedGitDataServer) GetFile(context.Context, *RequestGetFile) (*ResponseGetFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (*UnimplementedGitDataServer) ListTag(context.Context, *RequestListTag) (*ResponseListTag, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTag not implemented")
}
func (*UnimplementedGitDataServer) ListBranch(context.Context, *RequestListBranch) (*ResponseListBranch, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBranch not implemented")
}

func RegisterGitDataServer(s *grpc.Server, srv GitDataServer) {
	s.RegisterService(&_GitData_serviceDesc, srv)
}

func _GitData_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestListRepositories)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).ListRepositories(ctx, req.(*RequestListRepositories))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_ListReferences_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestListReferences)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).ListReferences(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/ListReferences",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).ListReferences(ctx, req.(*RequestListReferences))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_GetRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetRepository)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).GetRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/GetRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).GetRepository(ctx, req.(*RequestGetRepository))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_GetReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).GetReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/GetReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).GetReference(ctx, req.(*RequestGetReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_GetCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetCommit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).GetCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/GetCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).GetCommit(ctx, req.(*RequestGetCommit))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_GetTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetTree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).GetTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/GetTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).GetTree(ctx, req.(*RequestGetTree))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_GetBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).GetBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/GetBlob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).GetBlob(ctx, req.(*RequestGetBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).GetFile(ctx, req.(*RequestGetFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_ListTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestListTag)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).ListTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/ListTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).ListTag(ctx, req.(*RequestListTag))
	}
	return interceptor(ctx, in, info, handler)
}

func _GitData_ListBranch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestListBranch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GitDataServer).ListBranch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mono.git.GitData/ListBranch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GitDataServer).ListBranch(ctx, req.(*RequestListBranch))
	}
	return interceptor(ctx, in, info, handler)
}

var _GitData_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mono.git.GitData",
	HandlerType: (*GitDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _GitData_ListRepositories_Handler,
		},
		{
			MethodName: "ListReferences",
			Handler:    _GitData_ListReferences_Handler,
		},
		{
			MethodName: "GetRepository",
			Handler:    _GitData_GetRepository_Handler,
		},
		{
			MethodName: "GetReference",
			Handler:    _GitData_GetReference_Handler,
		},
		{
			MethodName: "GetCommit",
			Handler:    _GitData_GetCommit_Handler,
		},
		{
			MethodName: "GetTree",
			Handler:    _GitData_GetTree_Handler,
		},
		{
			MethodName: "GetBlob",
			Handler:    _GitData_GetBlob_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _GitData_GetFile_Handler,
		},
		{
			MethodName: "ListTag",
			Handler:    _GitData_ListTag_Handler,
		},
		{
			MethodName: "ListBranch",
			Handler:    _GitData_ListBranch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/git/data.proto",
}
