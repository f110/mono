syntax = "proto3";
package build.schema;
option  go_package = "go.f110.dev/mono/go/build/database;database";

import "ddl.proto";
import "google/protobuf/timestamp.proto";

enum TestStatus {
  TEST_STATUS_PASSED = 0;
  TEST_STATUS_FLAKY  = 1;
  TEST_STATUS_FAILED = 2;
}

message SourceRepository {
  int32  id        = 1 [(dev.f110.ddl.column) = { sequence: true }];
  string url       = 2;
  string clone_url = 3;
  string name      = 4 [(dev.f110.ddl.column) = { size: 100 }];
  bool private     = 5;

  option (dev.f110.ddl.table) = {
    primary_key: "id"
    with_timestamp: true
  };

  option (dev.f110.ddl.dao) = {
    queries: {
      name: "All"
      query: "SELECT * FROM `:table_name:`"
    }
    queries: {
      name: "ByUrl"
      query: "SELECT * FROM `:table_name:` WHERE `url` = ?"
    }
  };
}

message Task {
  int32                      id                = 1 [(dev.f110.ddl.column) = { sequence: true }];
  SourceRepository           repository        = 2;
  string                     job_name          = 3;
  string                     job_configuration = 4 [(dev.f110.ddl.column) = { type: "text" }];
  string                     revision          = 5;
  bool                       is_trunk          = 6;
  string                     bazel_version     = 7;
  bool                       success           = 8;
  string                     log_file          = 9;
  string                     command           = 10;
  string                     target            = 11 [deprecated = true];
  string                     targets           = 12 [(dev.f110.ddl.column) = { type: "text" }];
  string                     platform          = 13 [(dev.f110.ddl.column) = { type: "text" }];
  string                     via               = 14;
  string                     config_name       = 15;
  string                     node              = 16;
  string                     manifest          = 17 [(dev.f110.ddl.column) = { type: "text" }];
  string                     container         = 18;
  .google.protobuf.Timestamp start_at          = 19 [(dev.f110.ddl.column) = { null: true }];
  .google.protobuf.Timestamp finished_at       = 20 [(dev.f110.ddl.column) = { null: true }];

  option (dev.f110.ddl.table) = {
    primary_key: "id"
    with_timestamp: true
  };

  option (dev.f110.ddl.dao) = {
    queries: {
      name: "All"
      query: "SELECT * FROM `:table_name:`"
    }
    queries: {
      name: "ByRepositoryId"
      query: "SELECT * FROM `:table_name:` WHERE `repository_id` = ?"
    }
    queries: {
      name: "Pending"
      query: "SELECT * FROM `:table_name:` WHERE `start_at` IS NULL"
    }
  };
}

message TrustedUser {
  int32  id        = 1 [(dev.f110.ddl.column) = { sequence: true }];
  int64  github_id = 2;
  string username  = 3;

  option (dev.f110.ddl.table) = {
    primary_key: "id"
    with_timestamp: true
  };

  option (dev.f110.ddl.dao) = {
    queries: {
      name: "All"
      query: "SELECT * FROM `:table_name:`"
    }
    queries: {
      name: "ByGithubId"
      query: "SELECT * FROM `:table_name:` WHERE `github_id` = ?"
    }
  };
}

message PermitPullRequest {
  int32  id         = 1 [(dev.f110.ddl.column) = { sequence: true }];
  string repository = 2;
  int32  number     = 3;

  option (dev.f110.ddl.table) = {
    primary_key: "id"
    with_timestamp: true
  };

  option (dev.f110.ddl.dao) = {
    queries: {
      name: "ByRepositoryAndNumber"
      query: "SELECT * FROM `:table_name:` WHERE `repository` = ? AND `number` = ?"
    }
  };
}

message TestReport {
  int32                      id         = 1 [(dev.f110.ddl.column) = { sequence: true }];
  SourceRepository           repository = 2;
  Task                       task       = 3;
  string                     label      = 4;
  TestStatus                 status     = 5;
  int64                      duration   = 6;
  .google.protobuf.Timestamp start_at   = 7;

  option (dev.f110.ddl.table) = {
    primary_key: "id"
    indexes: {
      name: "idx_label"
      columns: "label"
    }
    indexes: {
      name: "idx_task_id"
      columns: "task"
    }
  };

  option (dev.f110.ddl.dao) = {
    queries: {
      name: "ByTaskId"
      query: "SELECT * FROM `:table_name:` WHERE `task_id` = ?"
    }
  };
}
