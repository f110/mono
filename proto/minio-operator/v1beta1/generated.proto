// Generated by: gen-go-to-protobuf
syntax = "proto3";
package github.com.minio.minioperator.apis.miniocontroller.v1beta1;
option  go_package              = "github.com/minio/minio-operator/pkg/apis/miniocontroller/v1beta1";
option (dev.f110.kubeproto.k8s) = {
  domain: "min.io",
  sub_group: "miniocontroller",
  version: "v1beta1",
};

import "kube.proto";
import "k8s.io/api/apps/v1/generated.proto";
import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";

message CertificateConfig {
  string          common_name       = 1 [(dev.f110.kubeproto.field) = { go_name: "CommonName", api_field_name: "commonName", inline: false }];
  repeated string organization_name = 2 [(dev.f110.kubeproto.field) = { go_name: "OrganizationName", api_field_name: "organizationName", inline: false }];
  repeated string dns_names         = 3 [(dev.f110.kubeproto.field) = { go_name: "DNSNames", api_field_name: "dnsNames", inline: false }];
}

message LocalCertificateReference {
  string name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
  string type = 2 [(dev.f110.kubeproto.field) = { go_name: "Type", api_field_name: "type", inline: false }];
}

message MinIOInstance {
  MinIOInstanceScheduler scheduler = 3 [(dev.f110.kubeproto.field) = { go_name: "Scheduler", api_field_name: "scheduler", inline: false }];
  MinIOInstanceSpec      spec      = 4 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  MinIOInstanceStatus    status    = 5 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message MinIOInstanceList {
  k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  repeated MinIOInstance                        items     = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message MinIOInstanceScheduler {
  // SchedulerName defines the name of scheduler to be used to schedule MinIOInstance pods
  string name = 1 [(dev.f110.kubeproto.field) = { go_name: "Name", api_field_name: "name", inline: false }];
}

message MinIOInstanceSpec {
  // Image defines the MinIOInstance Docker image.
  string image = 1 [(dev.f110.kubeproto.field) = { go_name: "Image", api_field_name: "image", inline: false }];
  // Replicas defines the number of MinIO instances in a MinIOInstance resource
  int32 replicas = 2 [(dev.f110.kubeproto.field) = { go_name: "Replicas", api_field_name: "replicas", inline: false }];
  // Pod Management Policy for pod created by StatefulSet
  k8s.io.api.apps.v1.PodManagementPolicyType pod_management_policy = 3 [(dev.f110.kubeproto.field) = { go_name: "PodManagementPolicy", api_field_name: "podManagementPolicy", inline: false }];
  // Metadata defines the object metadata passed to each pod that is a part of this MinIOInstance
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 4 [(dev.f110.kubeproto.field) = { go_name: "Metadata", api_field_name: "metadata", inline: false }];
  // If provided, use this secret as the credentials for MinIOInstance resource
  // Otherwise MinIO server creates dynamic credentials printed on MinIO server startup banner
  optional k8s.io.api.core.v1.LocalObjectReference creds_secret = 5 [(dev.f110.kubeproto.field) = { go_name: "CredsSecret", api_field_name: "credsSecret", inline: false }];
  // If provided, use these environment variables for MinIOInstance resource
  repeated k8s.io.api.core.v1.EnvVar env = 6 [(dev.f110.kubeproto.field) = { go_name: "Env", api_field_name: "env", inline: false }];
  // If provided, use these requests and limit for cpu/memory resource allocation
  k8s.io.api.core.v1.ResourceRequirements resources = 7 [(dev.f110.kubeproto.field) = { go_name: "Resources", api_field_name: "resources", inline: false }];
  // VolumeClaimTemplate allows a user to specify how volumes inside a MinIOInstance
  optional k8s.io.api.core.v1.PersistentVolumeClaim volume_claim_template = 8 [(dev.f110.kubeproto.field) = { go_name: "VolumeClaimTemplate", api_field_name: "volumeClaimTemplate", inline: false }];
  // NodeSelector is a selector which must be true for the pod to fit on a node.
  // Selector which must match a node's labels for the pod to be scheduled on that node.
  // More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  map<string, string> node_selector = 9 [(dev.f110.kubeproto.field) = { go_name: "NodeSelector", api_field_name: "nodeSelector", inline: false }];
  // If specified, affinity will define the pod's scheduling constraints
  optional k8s.io.api.core.v1.Affinity affinity = 10 [(dev.f110.kubeproto.field) = { go_name: "Affinity", api_field_name: "affinity", inline: false }];
  // ExternalCertSecret allows a user to specify custom CA certificate, and private key for group replication SSL.
  optional LocalCertificateReference external_cert_secret = 11 [(dev.f110.kubeproto.field) = { go_name: "ExternalCertSecret", api_field_name: "externalCertSecret", inline: false }];
  // Mount path for MinIO volume (PV). Defaults to /export
  string mountpath = 12 [(dev.f110.kubeproto.field) = { go_name: "Mountpath", api_field_name: "mountPath", inline: false }];
  // Subpath inside mount path. This is the directory where MinIO stores data. Default to "" (empty)
  string subpath = 13 [(dev.f110.kubeproto.field) = { go_name: "Subpath", api_field_name: "subPath", inline: false }];
  // Liveness Probe for container liveness. Container will be restarted if the probe fails.
  optional k8s.io.api.core.v1.Probe liveness = 14 [(dev.f110.kubeproto.field) = { go_name: "Liveness", api_field_name: "liveness", inline: false }];
  // Readiness Probe for container readiness. Container will be removed from service endpoints if the probe fails.
  optional k8s.io.api.core.v1.Probe readiness = 15 [(dev.f110.kubeproto.field) = { go_name: "Readiness", api_field_name: "readiness", inline: false }];
  // RequestAutoCert allows user to enable Kubernetes based TLS cert generation and signing as explained here:
  // https://kubernetes.io/docs/tasks/tls/managing-tls-in-a-cluster/
  bool request_auto_cert = 16 [(dev.f110.kubeproto.field) = { go_name: "RequestAutoCert", api_field_name: "requestAutoCert", inline: false }];
  // CertConfig allows users to set entries like CommonName, Organization, etc for the certificate
  optional CertificateConfig cert_config = 17 [(dev.f110.kubeproto.field) = { go_name: "CertConfig", api_field_name: "certConfig", inline: false }];
  // Tolerations allows users to set entries like effect, key, operator, value.
  repeated k8s.io.api.core.v1.Toleration tolerations = 18 [(dev.f110.kubeproto.field) = { go_name: "Tolerations", api_field_name: "tolerations", inline: false }];
}

message MinIOInstanceStatus {
  int32 available_replicas = 1 [(dev.f110.kubeproto.field) = { go_name: "AvailableReplicas", api_field_name: "availableReplicas", inline: false }];
}

message Mirror {
  MirrorSpec   spec   = 3 [(dev.f110.kubeproto.field) = { go_name: "Spec", api_field_name: "spec", inline: false }];
  MirrorStatus status = 4 [(dev.f110.kubeproto.field) = { go_name: "Status", api_field_name: "status", inline: false }];

  option (dev.f110.kubeproto.kind) = {
  };
}

message MirrorList {
  k8s.io.apimachinery.pkg.apis.meta.v1.TypeMeta type_meta = 1 [(dev.f110.kubeproto.field) = { go_name: "TypeMeta", inline: true }];
  k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta list_meta = 2 [(dev.f110.kubeproto.field) = { go_name: "ListMeta", api_field_name: "metadata", inline: false }];
  repeated Mirror                               items     = 3 [(dev.f110.kubeproto.field) = { go_name: "Items", api_field_name: "items", inline: false }];
}

message MirrorSpec {
  // Version defines the MinIO Client (mc) Docker image version.
  string version = 1 [(dev.f110.kubeproto.field) = { go_name: "Version", api_field_name: "version", inline: false }];
  // SourceEndpoint is the endpoint of MinIO instance to backup.
  string source_endpoint = 2 [(dev.f110.kubeproto.field) = { go_name: "SourceEndpoint", api_field_name: "srcEndpoint", inline: false }];
  // SourceCredsSecret as the credentials for source MinIO instance.
  optional k8s.io.api.core.v1.LocalObjectReference source_creds_secret = 3 [(dev.f110.kubeproto.field) = { go_name: "SourceCredsSecret", api_field_name: "srcCredsSecret", inline: false }];
  // SourceBucket defines the bucket on source MinIO instance
  string source_bucket = 4 [(dev.f110.kubeproto.field) = { go_name: "SourceBucket", api_field_name: "srcBucket", inline: false }];
  // Region in which the source S3 compatible bucket is located.
  // uses "us-east-1" by default
  string source_region = 5 [(dev.f110.kubeproto.field) = { go_name: "SourceRegion", api_field_name: "srcRegion", inline: false }];
  // Endpoint (hostname only or fully qualified URI) of S3 compatible
  // storage service.
  string target_endpoint = 6 [(dev.f110.kubeproto.field) = { go_name: "TargetEndpoint", api_field_name: "targetEndpoint", inline: false }];
  // CredentialsSecret is a reference to the Secret containing the
  // credentials authenticating with the S3 compatible storage service.
  optional k8s.io.api.core.v1.LocalObjectReference target_creds_secret = 7 [(dev.f110.kubeproto.field) = { go_name: "TargetCredsSecret", api_field_name: "targetCredsSecret", inline: false }];
  // Bucket in which to store the Backup.
  string target_bucket = 8 [(dev.f110.kubeproto.field) = { go_name: "TargetBucket", api_field_name: "targetBucket", inline: false }];
  // Region in which the Target S3 compatible bucket is located.
  // uses "us-east-1" by default
  string target_region = 9 [(dev.f110.kubeproto.field) = { go_name: "TargetRegion", api_field_name: "targetRegion", inline: false }];
}

message MirrorStatus {
  // Outcome holds the results of a Mirror operation.
  string outcome = 1 [(dev.f110.kubeproto.field) = { go_name: "Outcome", api_field_name: "outcome", inline: false }];
  // TimeStarted is the time at which the backup was started.
  k8s.io.apimachinery.pkg.apis.meta.v1.Time time_started = 2 [(dev.f110.kubeproto.field) = { go_name: "TimeStarted", api_field_name: "timeStarted", inline: false }];
  // TimeCompleted is the time at which the backup completed.
  k8s.io.apimachinery.pkg.apis.meta.v1.Time time_completed = 3 [(dev.f110.kubeproto.field) = { go_name: "TimeCompleted", api_field_name: "timeCompleted", inline: false }];
}
