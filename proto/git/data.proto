syntax = "proto3";
package mono.git;
option  go_package = "go.f110.dev/mono/go/pkg/git";

import "google/protobuf/timestamp.proto";

service GitData {
  rpc ListRepositories(RequestListRepositories) returns (ResponseListRepositories);
  rpc ListReferences(RequestListReferences) returns (ResponseListReferences);
  rpc GetRepository(RequestGetRepository) returns (ResponseGetRepository);
  rpc GetReference(RequestGetReference) returns (ResponseGetReference);
  rpc GetCommit(RequestGetCommit) returns (ResponseGetCommit);
  rpc GetTree(RequestGetTree) returns (ResponseGetTree);
  rpc GetBlob(RequestGetBlob) returns (ResponseGetBlob);
  rpc GetFile(RequestGetFile) returns (ResponseGetFile);
  rpc ListTag(RequestListTag) returns (ResponseListTag);
  rpc ListBranch(RequestListBranch) returns (ResponseListBranch);
}

message Reference {
  string name   = 1;
  string target = 2;
  string hash   = 3;
}

message TreeEntry {
  string path = 1;
  string mode = 2;
  string sha  = 3;
  int64  size = 4;
}

message Commit {
  string          sha       = 1;
  Signature       author    = 2;
  Signature       committer = 3;
  string          tree      = 4;
  string          message   = 5;
  repeated string parents   = 6;
}

message Signature {
  string                    name  = 1;
  string                    email = 2;
  google.protobuf.Timestamp when  = 3;
}

message Repository {
  string name           = 1;
  string default_branch = 2;
  string url            = 3;
  string git_url        = 4;
}

message RequestListRepositories {}

message ResponseListRepositories {
  repeated Repository repositories = 1;
}

message RequestListReferences {
  string repo = 1;
}

message ResponseListReferences {
  repeated Reference refs = 1;
}

message RequestGetRepository {
  string repo = 1;
}

message ResponseGetRepository {
  string name    = 1;
  string url     = 2;
  string hosting = 3;
}

message RequestGetReference {
  string repo = 1;
  string ref  = 2;
}

message ResponseGetReference {
  Reference ref = 1;
}

message RequestGetCommit {
  string repo = 1;
  string sha  = 2;
}

message ResponseGetCommit {
  Commit commit = 1;
}

message RequestGetTree {
  string repo = 1;
  // sha is a tree hash. not a commit hash.
  string sha       = 2;
  string ref       = 3;
  string path      = 4;
  bool   recursive = 5;
}

message ResponseGetTree {
  // sha is a tree hash.
  string             sha  = 1;
  repeated TreeEntry tree = 2;
}

message RequestGetBlob {
  string repo = 1;
  // sha is a blob object hash. not a commit hash.
  string sha = 2;
}

message ResponseGetBlob {
  string sha     = 1;
  int64  size    = 2;
  bytes  content = 3;
}

message RequestGetFile {
  string repo = 1;
  string ref  = 2;
  string path = 3;
}

message ResponseGetFile {
  bytes  content  = 1;
  string raw_url  = 2;
  string edit_url = 3;
  string sha      = 4;
}

message RequestListTag {
  string repo = 1;
}

message ResponseListTag {
  repeated Reference tags = 1;
}

message RequestListBranch {
  string repo = 1;
}

message ResponseListBranch {
  repeated Reference branches = 1;
}
