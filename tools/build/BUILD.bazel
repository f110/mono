# gazelle:resolve go go.f110.dev/mono/tools/build/pkg/database //tools/build/pkg/database:go_default_library

load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")

pkg_tar(
    name = "builder_bin",
    srcs = ["//tools/build/cmd/builder"],
    mode = "0755",
    package_dir = "/usr/local/bin",
)

container_image(
    name = "builder_image",
    base = "@com_google_distroless_base//image",
    entrypoint = ["/usr/local/bin/builder"],
    tars = [":builder_bin"],
)

container_push(
    name = "push_builder",
    format = "Docker",
    image = ":builder_image",
    registry = "registry.f110.dev",
    repository = "build/builder",
    tag = "latest",
)

pkg_tar(
    name = "dashboard_bin",
    srcs = ["//tools/build/cmd/dashboard"],
    mode = "0755",
    package_dir = "/usr/local/bin",
)

container_image(
    name = "dashboard_image",
    base = "@com_google_distroless_base//image",
    entrypoint = ["/usr/local/bin/dashboard"],
    tars = [":dashboard_bin"],
)

container_push(
    name = "push_dashboard",
    format = "Docker",
    image = ":dashboard_image",
    registry = "registry.f110.dev",
    repository = "build/dashboard",
    tag = "latest",
)

pkg_tar(
    name = "sidecar_bin",
    srcs = [
        "//tools/build/cmd/sidecar",
    ],
    mode = "0755",
    package_dir = "/usr/local/bin",
)

container_image(
    name = "sidecar_image",
    base = "@com_google_distroless_base//image",
    entrypoint = ["/usr/local/bin/sidecar"],
    tars = [":sidecar_bin"],
)

container_push(
    name = "push_sidecar",
    format = "Docker",
    image = ":sidecar_image",
    registry = "registry.f110.dev",
    repository = "build/sidecar",
    tag = "latest",
)

pkg_tar(
    name = "migrate_bin",
    srcs = ["@dev_f110_protoc_ddl//cmd/migrate"],
    mode = "0755",
    package_dir = "/usr/local/bin",
)

pkg_tar(
    name = "schema_files",
    srcs = ["//tools/build/pkg/database:schema_txt"],
    mode = "0644",
    package_dir = "/schema",
)

container_image(
    name = "migrate_image",
    base = "@com_google_distroless_base//image",
    entrypoint = ["/usr/local/bin/migrate"],
    tars = [
        ":migrate_bin",
        ":schema_files",
    ],
)

container_push(
    name = "push_migrate",
    format = "Docker",
    image = ":migrate_image",
    registry = "registry.f110.dev",
    repository = "build/migrate",
    tag = "latest",
)
