load("@io_bazel_rules_go//go:def.bzl", "go_library")

go_library(
    name = "metric",
    srcs = [
        "cloudmonitoring.go",
        "constants.go",
        "error.go",
        "metric.go",
        "option.go",
        "version.go",
    ],
    importmap = "go.f110.dev/mono/vendor/github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric",
    importpath = "github.com/GoogleCloudPlatform/opentelemetry-operations-go/exporter/metric",
    visibility = ["//visibility:public"],
    deps = [
        "//vendor/cloud.google.com/go/monitoring/apiv3/v2:apiv3",
        "//vendor/cloud.google.com/go/monitoring/apiv3/v2/monitoringpb",
        "//vendor/github.com/GoogleCloudPlatform/opentelemetry-operations-go/internal/resourcemapping",
        "//vendor/github.com/googleapis/gax-go/v2:gax-go",
        "//vendor/go.opentelemetry.io/otel",
        "//vendor/go.opentelemetry.io/otel/attribute",
        "//vendor/go.opentelemetry.io/otel/sdk/instrumentation",
        "//vendor/go.opentelemetry.io/otel/sdk/metric",
        "//vendor/go.opentelemetry.io/otel/sdk/metric/metricdata",
        "//vendor/go.opentelemetry.io/otel/sdk/resource",
        "//vendor/go.opentelemetry.io/otel/semconv/v1.24.0:v1_24_0",
        "//vendor/go.opentelemetry.io/otel/trace",
        "//vendor/golang.org/x/oauth2/google",
        "//vendor/google.golang.org/api/option",
        "//vendor/google.golang.org/genproto/googleapis/api/distribution",
        "//vendor/google.golang.org/genproto/googleapis/api/label",
        "//vendor/google.golang.org/genproto/googleapis/api/metric",
        "//vendor/google.golang.org/genproto/googleapis/api/monitoredres",
        "//vendor/google.golang.org/grpc",
        "//vendor/google.golang.org/grpc/encoding/gzip",
        "//vendor/google.golang.org/grpc/metadata",
        "//vendor/google.golang.org/protobuf/types/known/anypb",
        "//vendor/google.golang.org/protobuf/types/known/timestamppb",
    ],
)
